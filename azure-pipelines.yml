# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - azure-pipelines.yml

variables:
- group: DevOps Access Keys
- name: version
  value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
- name: TagName
  value: "Fermitools-$((version))"

stages:

#####################################
# Linux Stages - Microsoft Hosted VMs
#####################################

### Dependency preparation stage
- stage: linux_prep_deps
  displayName: 'Linux Prepare Dependencies'
  jobs:
  - job: RunDeps
    displayName: 'Runtime Dependencies'
    timeoutInMinutes: 20
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    steps:

    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'

    - bash: |
        echo "##vso[task.setvariable variable=VERSION]$(VERSION)"
      displayName: 'Expose Version string as environment variable.'

    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge -c fermi python=3.7 anaconda-client conda-build libiconv pathlib2 fermi-repoman
      displayName: 'Set up build environment'

    - bash: |
        mkdir components && cd components
        repoman --remote-base https://github.com/fermi-lat checkout-list ../packageList.txt
      displayName: 'Download Sources'

    - bash: |
        echo $VERSION
        conda build --python=3.7 -c conda-forge -c fermi components/Fermitools-dependencies
      displayName: 'Conda-Build Runtime Dependencies'

    - bash: anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi --label main --label dev --label $(TagName) --force /usr/share/miniconda/conda-bld/linux-64/fermitools-dependencies-*
      displayName: 'Upload Runtime Dependencies'

  - job: BuildDeps
    displayName: 'Buildtime Dependencies'
    timeoutInMinutes: 20
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    - bash: |
        echo "##vso[task.setvariable variable=VERSION]$(VERSION)"
      displayName: 'Expose Version string as environment variable.'
    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge -c fermi python=3.7 anaconda-client conda-build libiconv pathlib2 fermi-repoman
      displayName: 'Set up build environment'
    - bash: |
        mkdir components && cd components
        repoman --remote-base https://github.com/fermi-lat checkout-list ../packageList.txt
      displayName: 'Download Sources'

    - bash: conda build --python=3.7 -c conda-forge -c fermi components/Fermitools-build-deps
      displayName: 'Conda-Build Build Dependencies'

    - bash: anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi --label main --label dev --label $(TagName) --force  /usr/share/miniconda/conda-bld/linux-64/fermitools-build-deps-*
      displayName: 'Upload Build Dependencies'


- stage: linux_tag_explicit_deps
  displayName: 'Linux Save Explicit Dependencies'
  dependsOn: linux_prep_deps
  jobs:
  - job: SaveExplicitDeps
    displayName: 'Save explicit linux dependencies'
    timeoutInMinutes: 20
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    - name: TagName
      value: Fermitools-$(grep -i 'set version' ../meta.yaml | awk '{ print $5}' | sed 's/"//g')
    - group: DevOps Access Keys
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    - bash: |
        echo "##vso[task.setvariable variable=VERSION]$(VERSION)"
      displayName: 'Expose Version string as environment variable.'
    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge python=3.7 libiconv pathlib2
      displayName: 'Set up build environment'

    - bash: |
        git clone https://github.com/fermi-lat/Fermitools-explicit-build-deps-linux.git
        cd Fermitools-explicit-build-deps-linux
        git checkout -B $(Build.SourceBranchName)
      displayName: 'Download Sources'

    - bash: conda create --yes --quiet -n pipeline_bld_deps -c conda-forge -c fermi fermitools-build-deps=$VERSION
      displayName: 'Download Build Dependencies'

    - bash: conda list -n pipeline_bld_deps --explicit > Fermitools-explicit-build-deps-linux/explicit-deps.txt
      displayName: 'List Explicit Build Dependencies'

    - bash: |
        cd Fermitools-explicit-build-deps-linux
        git config --global user.email "joseph.a.asercion@nasa.gov"
        git config --global user.name "jasercion"
        git config --global url."git@github.com:".insteadOf "https://github.com/"
        git add explicit-deps.txt
        git commit -m "Automatic commit from Azure Pipeline"
        git tag -m "Automatic tag from Azure Pipeline" $(TagName)
        git push --all --force
      displayName: 'Save Explicit Build Dependencies list'
    - task: DownloadSecureFile@1
      name: sshkey # The name with which to reference the secure file's path on the agent, like $(mySecureFile.secureFilePath)
      inputs:
        secureFile: azure_github
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: HTZ7yceIQn0CcPv/4tDqeUSvt3I=|m+NvUHSs9Lu4Y9e4W1WLU/eEfgI= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        sshKeySecureFile: azure_github


  ### Linux Build Stage ###
- stage: linux_build_stage
  displayName: 'Linux Build Stage'
  dependsOn: linux_prep_deps
  jobs:
  - job: buildTools
    displayName: 'Build the Fermitools'
    timeoutInMinutes: 150
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - name: BUILD_NUMBER
      value: $(conda search -c fermi/label/dev fermitools | grep -i $(version) | tail -1 | awk '{ print $3}' | cut -d "_" -f 2)
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    - name: TagName
      value: Fermitools-$(grep -i 'set version' ../meta.yaml | awk '{ print $5}' | sed 's/"//g')
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    ### Build commands start here ###
    # Query last build number for this version and iterate if necessary
    - bash: echo "##vso[task.setvariable variable=BUILD_NUMBER]$(BUILD_NUMBER)"
      displayName: 'Query last build number of this version'
    - bash: echo "##vso[task.setvariable variable=BUILD_NUMBER]$(expr $BUILD_NUMBER + 1)"
      condition: notIn(variables['BUILD_NUMBER'], variables['noSuch'])
      displayName: 'Iterate build number if it exists'

    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge python=3.7 anaconda-client conda-build libiconv pathlib2
      displayName: 'Set up build environment'
    - bash: conda build --python=3.7 -c conda-forge -c fermi .
      displayName: 'Run the build'
    - bash: anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi --label=dev --label=$(TagName) --label=$(Build.SourceBranchName) --force /usr/share/miniconda/conda-bld/linux-64/fermitools-*
      displayName: 'Upload build to Anaconda Cloud'


  #### Linux Test Stage ###
- stage: linux_test_stage
  displayName: 'Ubuntu Test Stage'
  dependsOn: linux_build_stage
  jobs:
  - job: testTools
    displayName: 'Test the Fermitools'
    timeoutInMinutes: 150
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - name: BUILD_NUMBER
      value: $(conda search -c fermi/label/dev fermitools | grep -i $(version) | tail -1 | awk '{ print $3}' | cut -d "_" -f 2)
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    - name: TagName
      value: Fermitools-$(grep -i 'set version' ../meta.yaml | awk '{ print $5}' | sed 's/"//g')
    steps:
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    # junit-xml must be installed so the unit test script
    # can produce output in the JUnit format
    - bash: |
        conda create --name Test --yes -c conda-forge -c fermi -c fermi/label/dev python=3.7 fermitools-test-scripts=3.0 junit-xml
      displayName: 'Install the tools and test scripts'
    - bash: |
        source activate Test
        conda install --yes -c conda-forge -c fermi -c fermi/label/dev fermitools=$(VERSION)
        ST-unit-test --bit64
      displayName: 'Run Unit Tests'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'ST-unit-test-Output.xml'
        testRunTitle: 'Linux Unit Tests'
#####################################

######################################
## MacOS Stages - Microsoft Hosted VMs
######################################
#
### Dependency preparation stage
- stage: macosx_prep_deps
  displayName: 'MacOSX Prepare Dependencies'
  dependsOn: []
  jobs:
  - job: RunDeps
    displayName: 'Runtime Dependencies'
    timeoutInMinutes: 40
    pool:
      vmImage: 'macOS-10.14'
    variables:
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    steps:

    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
    # We need to take ownership if we want to update conda or install packages globally
    - bash: sudo chown -R $USER $CONDA
      displayName: 'Take ownership of conda installation'

    - bash: |
        echo "##vso[task.setvariable variable=VERSION]$(VERSION)"
      displayName: 'Expose Version string as environment variable.'

    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge -c fermi python=3.7 anaconda-client conda-build libiconv pathlib2 fermi-repoman
      displayName: 'Set up build environment'

    - bash: |
        mkdir components && cd components
        repoman --remote-base https://github.com/fermi-lat checkout-list ../packageList.txt
      displayName: 'Download Sources'

    - bash: |
        echo $VERSION
        conda build --python=3.7 -c conda-forge -c fermi components/Fermitools-dependencies
      displayName: 'Conda-Build Runtime Dependencies'

    - bash: anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi --label main --label dev --label $(TagName) --force /usr/local/miniconda/conda-bld/osx-64/fermitools-dependencies-*
      displayName: 'Upload Runtime Dependencies'

  - job: BuildDeps
    displayName: 'Buildtime Dependencies'
    timeoutInMinutes: 40
    pool:
      vmImage: 'macOS-10.14'
    variables:
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
    # We need to take ownership if we want to update conda or install packages globally
    - bash: sudo chown -R $USER $CONDA
      displayName: 'Take ownership of conda installation'
    - bash: |
        echo "##vso[task.setvariable variable=VERSION]$(VERSION)"
      displayName: 'Expose Version string as environment variable.'
    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge -c fermi python=3.7 anaconda-client conda-build libiconv pathlib2 fermi-repoman
      displayName: 'Set up build environment'
    - bash: |
        mkdir components && cd components
        repoman --remote-base https://github.com/fermi-lat checkout-list ../packageList.txt
      displayName: 'Download Sources'

    - bash: conda build --python=3.7 -c conda-forge -c fermi components/Fermitools-build-deps
      displayName: 'Conda-Build Build Dependencies'

    - bash: anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi  --label main --label dev --label $(TagName) --force /usr/local/miniconda/conda-bld/osx-64/fermitools-build-deps-*
      displayName: 'Upload Build Dependencies'


- stage: macosx_tag_explicit_deps
  displayName: 'MacOSX Save Explicit Dependencies'
  dependsOn: macosx_prep_deps
  jobs:
  - job: SaveExplicitDeps
    displayName: 'Save explicit MacOSX dependencies'
    timeoutInMinutes: 20
    pool:
      vmImage: 'macOS-10.14'
    variables:
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    - name: TagName
      value: Fermitools-$(grep -i 'set version' ../meta.yaml | awk '{ print $5}' | sed 's/"//g')
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
    # We need to take ownership if we want to update conda or install packages globally
    - bash: sudo chown -R $USER $CONDA
      displayName: 'Take ownership of conda installation'

    - bash: |
        echo "##vso[task.setvariable variable=VERSION]$(VERSION)"
      displayName: 'Expose Version string as environment variable.'
    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge python=3.7 libiconv pathlib2
      displayName: 'Set up build environment'

    - bash: |
        git clone https://github.com/fermi-lat/Fermitools-explicit-build-deps-macosx.git
        cd Fermitools-explicit-build-deps-macosx
        git checkout -B $(Build.SourceBranchName)
      displayName: 'Download Sources'

    - bash: conda create --yes --quiet -n pipeline_bld_deps -c conda-forge -c fermi fermitools-build-deps=$VERSION
      displayName: 'Download Build Dependencies'

    - bash: conda list -n pipeline_bld_deps --explicit > Fermitools-explicit-build-deps-macosx/explicit-deps.txt
      displayName: 'List Explicit Build Dependencies'

    - bash: |
        cd Fermitools-explicit-build-deps-macosx
        git config --global user.email "joseph.a.asercion@nasa.gov"
        git config --global user.name "jasercion"
        git config --global --add url."git@github.com:".insteadOf "https://github.com/"
        git add explicit-deps.txt
        git commit -m "Automatic commit from Azure Pipeline"
        git tag -m "Automatic tag from Azure Pipeline" $(TagName)
        git push --all --force
    - task: DownloadSecureFile@1
      name: sshkey # The name with which to reference the secure file's path on the agent, like $(mySecureFile.secureFilePath)
      inputs:
        secureFile: Azure_MacOS
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: github.com,192.30.253.112 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        sshKeySecureFile: Azure_MacOS
      displayName: 'Save Explicit Build Dependencies list'

#####################################
# MacOS Stages - Microsoft Hosted VMs
#####################################

  #### MacOS Build Stage ##
- stage: macos_build_stage
  displayName: 'MacOS Build Stage'
  dependsOn: macosx_prep_deps
  jobs:
  - job: buildTools
    displayName: 'Build the Fermitools'
    timeoutInMinutes: 150
    pool:
      vmImage: 'macOS-10.14'
    variables:
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    - name: BUILD_NUMBER
      value: $(conda search -c fermi/label/dev fermitools | grep -i $(version) | tail -1 | awk '{ print $3}' | cut -d "_" -f 2)
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
    # We need to take ownership if we want to update conda or install packages globally
    - bash: sudo chown -R $USER $CONDA
      displayName: 'Take ownership of conda installation'

    ### Build commands start here ###
    # Query last build number for this version and iterate if necessary
    - bash: echo "##vso[task.setvariable variable=BUILD_NUMBER]$(BUILD_NUMBER)"
      displayName: 'Query last build number of this version'
    - bash: echo "##vso[task.setvariable variable=BUILD_NUMBER]$(expr $BUILD_NUMBER + 1)"
      condition: notIn(variables['BUILD_NUMBER'], variables['noSuch'])
      displayName: 'Iterate build number if it exists'
    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge python=3.7 anaconda-client conda-build pathlib2
      displayName: 'Set up build environment'
    - bash: conda build --python=3.7 -c conda-forge -c fermi .
      displayName: 'Run the build'
    - bash: anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi --label=dev --label=$(TagName) --label=$(Build.SourceBranchName) --force /usr/local/miniconda/conda-bld/osx-64/fermitools-*
      displayName: 'Upload build to Anaconda Cloud'

  #### MacOS Test Stage ###
- stage: macos_test_stage
  displayName: 'MacOS Test Stage'
  dependsOn: macos_build_stage
  variables:
  - name: VERSION
    value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
  - name: BUILD_NUMBER
    value: $(conda search -c fermi/label/dev fermitools | grep -i $(version) | tail -1 | awk '{ print $3}' | cut -d "_" -f 2)
  jobs:
  - job: testTools
    displayName: 'Test the Fermitools'
    timeoutInMinutes: 500
    pool:
      vmImage: 'macOS-10.14'
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
    # We need to take ownership if we want to update conda or install packages globally
    - bash: sudo chown -R $USER $CONDA
      displayName: 'Take ownership of conda installation'
    - bash: |
        conda create --name Test --yes -c conda-forge -c fermi -c fermi/label/dev python=3.7 fermitools-test-scripts=3.0 junit-xml
      displayName: 'Install the tools and test scripts'
    - bash: |
        source activate Test
        conda install --yes -c conda-forge -c fermi -c fermi/label/dev fermitools=$(VERSION)
        ST-unit-test --bit64
      displayName: 'Run Unit Tests'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'ST-unit-test-Output.xml'
        testRunTitle: 'MacOS Unit Tests'
#####################################




######################################
# Repository Synchronization
######################################

- stage: repo_tag_sync
  displayName: 'Repo Tag Stage'
  dependsOn:
    - linux_build_stage
    - macos_build_stage
  jobs:
  - job: SyncTags
    displayName: 'Synchronize tags across repos'
    timeoutInMinutes: 20
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - name: VersionChild
      value: $(grep -i 'set version' ../meta.yaml | awk '{ print $5}' | sed 's/"//g')
    - name: Version
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    - name: TagNameChild
      value: "Fermitools-$(VersionChild)"
    - name: TagName
      value: "Fermitools-$(Version)"
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge -c fermi python=3.7 libiconv pathlib2 fermi-repoman
      displayName: 'Set up build environment'
    - bash: |
        mkdir components && cd components
        echo $(TagNameChild)
        repoman --remote-base https://github.com/fermi-lat checkout-list ../packageList.txt
      displayName: 'Download Sources'
    - bash: |
        pushd components
        echo $(TagNameChild)
        git config --global user.email "joseph.a.asercion@nasa.gov"
        git config --global user.name "jasercion"
        git config --global --add url."git@github.com:".insteadOf "https://github.com/"
        ../multi_release.sh "Automatic tag generated by Azure Pipeline." $(TagNameChild)
        popd
        git tag -f -m "Automatic tag generated by Azure Pipeline." $(TagName)
        git tag -f -m "Automatic tag generated by Azure Pipeline." $(Build.SourceBranchName)
        git push --all --force
      displayName: 'Tag Github Repositories'
    - task: DownloadSecureFile@1
      name: sshkey # The name with which to reference the secure file's path on the agent, like $(mySecureFile.secureFilePath)
      inputs:
        secureFile: Azure_MacOS
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: github.com,192.30.253.112 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        sshKeySecureFile: Azure_MacOS
      displayName: 'Save Explicit Build Dependencies list'
